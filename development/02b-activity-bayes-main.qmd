---
title: "CEJS Activity"
<<<<<<< HEAD
format: html
=======
format: pdf
editor: 
  markdown: 
    toc: true
    wrap: 72
>>>>>>> fffa65d56fbef4ceb71325975009729aa81f5c55
---

Armed with all of that background knowledge on the CEJS dataset and on
statistical inference, we can proceed with a detailed analysis of the
data. In particular, we are interested in assessing the following
hypothesis:

> *As the population of Black Americans increases (decreases), the level
> of energy expenditure increases (decreases).*

In this part of the session you will interpret results from a
statistical model fitted to datasets from different U.S. States.

<!-- solution-begin -->

::: {.callout-note icon="false" title="Instructor Note: Introduction"}
These are instructor notes; they will be removed from the student-facing
assignment file.

This is the **Bayesian** form of the activity.
:::

<!-- solution-end -->

```{r setup}
#| include: false
#| echo: false
library(tidyverse)
library(rstanarm)
library(bayesplot)
library(broom.mixed)
library(patchwork)

filename <- "../data/1.0-communities.csv"

mean_Intercept_GLOBAL <- 50
sd_Intercept_GLOBAL <- 12.5
```

```{r wrangling}
#| include: false
#| echo: false
df_raw <- read_csv(filename)
df_data <- 
  df_raw %>%
  janitor::clean_names()
```

# Overview

Throughout this activity, you will be studying a statistical model
fitted to data from the CEJS dataset. As a reminder, we are interested
in the `Energy Burden Percentile` (higher values correspond to a higher
burden) and the `Percent Black Census Tract` (which measures the number
of people in a region who are Black).

```{r fig-overview}
#| warning: false
#| echo: false
#| fig-align: center
#| fig-height: 3
#| fig-cap: CEJS data for Massachusetts.
df_data %>% 
  filter(state_territory == "Massachusetts") %>% 
  
  ggplot(aes(
    percent_black_or_african_american_alone,
    energy_burden_percentile
  )) +
  geom_point(size = 0.1) +
  facet_wrap(~state_territory, ncol = 2) +
  scale_x_continuous(labels = scales::percent) +
  theme_minimal() +
  labs(
    x = "Percent Black Census Tract",
    y = "Energy Burden Percentile",
  )
```

From this scatterplot, we can see that the energy burden seems to
increase as the percent Black increases. However, we can make this rough
observation more formal by using a statistical model.

# Analyze a Bayesian Model

To analyze the dataset, we will use the following statistical model,

$$ B = m P + b + \epsilon $$

where $B$ is the energy burden percentile, $P$ is the percent Black, $m$
is the slope parameter, $b$ is the intercept parameter, and $\epsilon$
is a *residual* term that represents factors not accounted in the model.
The residual term is assumed to be normally distributed
$\epsilon \sim N(0, \sigma^2)$ with an unknown parameter $\sigma^2$. All
three parameters have a prior distribution, defined via

$$
\begin{aligned} m \sim N(\mu_m, \sigma_m^2), \\ b \sim N(\mu_b, \sigma_b^2), \\ \sigma^2 \sim \text{Exponential}(1/s_y), \end{aligned}
$$

where $m, b, \sigma^2$ are independent.[^1] We will discuss how to set
the prior through its parameter values
$\mu_m, \mu_b, \sigma_m^2, \sigma_b^2$ later in this activity.

[^1]: Note that $s_y$ is determined based on the standard deviation in
    the observed data. This is a way of *autoscaling* the prior.

<!-- solution-begin -->

::: {.callout-note icon="false" title="Instructor Note: Model Assumptions"}
Note that this model makes a number of important assumptions, which
students may identify and question. We recommend validating student
input, but try to maintain a focus on the assumptions that are aligned
with the lesson's learning objectives. We enumerate important model
assumptions, ramifications, and relevance to learning objectives here:

-   The responses $B_i$ are independent when conditioned on the percent
    Black $P$.
    -   This is almost surely not true as there are a variety of other
        factors that affect one's energy burden, such as State-level
        economic policies. These other factors are not entirely captured
        in our lone predictor ($P$), which may manifest as association
        between the observed responses ($B_i$). This will lead to an
        *omitted variable bias* in our estimates.
    -   While omitted variable bias is an important consideration, it is
        outside the learning objectives in this lesson since this
        assumption is shared between the Frequentist and Bayesian
        approaches.
-   The structure of the response is linear; that is
    $B = m P + b + \epsilon$.
    -   This discounts the possibility of nonlinearity; for instance,
        there could be little change in the mean energy burden at small
        percent Black, but much larger change at higher values.
    -   While the structure of the response is an important
        consideration, it is outside the learning objectives in this
        lesson since this assumption is shared between the Frequentist
        and Bayesian approaches.
-   Residuals are normally distributed $\epsilon \sim N(0, \sigma^2)$
    with constant $\sigma^2$.
    -   This will never be exactly true, which we can check by
        inspecting the residuals. This assumptions has implications for
        our predictive uncertainty; for instance, assuming a constant
        $\sigma^2$ discounts the possibility of heteroskedasticity.
    -   While the residual distribution is an important consideration,
        it is outside the learning objectives in this lesson since this
        assumption is shared between the Frequentist and Bayesian
        approaches.
-   The intercept $b$ and slope $m$ parameters are treated as random
    variables with a distribution that represents our state of
    knowledge.
    -   This is a fundamental component of the Bayesian approach, and
        hence is directly related to the lesson's learning objectives.
:::

<!-- solution-end -->

```{r fit-MA}
#| include: false
#| echo: false
#| cache: true
model_MA <- stan_glm(
  data = df_data %>% 
    filter(
      str_detect(state_territory, "Massachusetts"),
      !is.na(percent_black_or_african_american_alone)
    ),
  # Likelihood model
  formula = energy_burden_percentile ~ percent_black_or_african_american_alone,
  family = gaussian,           # link function
  # Prior model, use the Stan defaults
  # Numerical parameters
  chains = 4, 
  iter = 5000*2, # to account for 50% burn-in
  seed = 84735,  # the BAYES seed!
  refresh = FALSE
)
```

## Study the posterior distribution

Results from a Bayesian model take the form of a *posterior
distribution* for the model parameters. The model has two parameters
that are closely related to our hypothesis: The slope $m$ and intercept
$b$ of the fitted line. "Fitting" the Bayesian model to the
Massachusetts dataset will result in a posterior distribution for the
parameters, with an example posterior given below:

```{r posteriors-MA}
#| warning: false
#| echo: false
#| fig-align: center
#| fig-height: 3
df_model_MA <- 
  model_MA %>% 
  as_tibble() %>% 
  select(Intercept = `(Intercept)`, Slope = percent_black_or_african_american_alone)

df_model_MA %>% 
  pivot_longer(
    c(Intercept, Slope),
    names_to = "parameter",
    values_to = "x"
  ) %>% 
  
  ggplot(aes(x)) +
  geom_density() +
  facet_wrap(~parameter) +
  theme_minimal() +
  labs(
    x = "Parameter Value",
    y = "Density",
  )
```

The posterior distribution helps us determine **how confident** we
should be in conclusions drawn from the model. The next exercise will
help you assess confidence in results based on the fitted model.

## Assessing confidence

Let's imagine three different posterior distributions for the posterior
(marginal) distribution for the slope parameter $m$.

```{r notional-posteriors}
#| warning: false
#| echo: false
#| fig-align: center
#| fig-height: 3
tibble(x = seq(-25, +75, length.out = 200)) %>% 
  mutate(
    d_A = dnorm(x, mean =  1, sd =  5),
    d_B = dnorm(x, mean = 25, sd = 20),
    d_C = dnorm(x, mean = 25, sd =  5),
  ) %>% 
  pivot_longer(
    cols = contains("d_"),
    names_sep = "_",
    names_to = c(".value", "Posterior")
  ) %>% 
  
  ggplot(aes(x, d)) +
  geom_line() +
  geom_vline(xintercept = 0, linetype = "dotted") +
  facet_grid(~Posterior, labeller = label_both) +
  theme_minimal() +
  labs(
    x = "Slope Parameter",
    y = "Posterior Density",
  )
```

**Model summaries**

<!-- task-begin -->

::: {.callout-note icon="false" title="Questions for the Class"}
-   Roughly, what fraction of *Posterior Distribution A* is greater than
    zero?
    -   (Write your response here):
-   Roughly, what fraction of *Posterior Distribution B* is greater than
    zero?
    -   (Write your response here):
-   Roughly, what fraction of *Posterior Distribution C* is greater than
    zero?
    -   (Write your response here):
-   Which posterior gives the *highest confidence* (*highest
    probability*) that the slope parameter is positive? How can you
    tell?
    -   (Write your response here): <!-- task-end -->
        <!-- solution-begin -->
-   Roughly, what fraction of *Posterior Distribution A* is greater than
    zero?
    -   Precisely 57.93%, so roughly 60%
-   Roughly, what fraction of *Posterior Distribution B* is greater than
    zero?
    -   Precisely 89.44%, so roughly 90%
-   Roughly, what fraction of *Posterior Distribution C* is greater than
    zero?
    -   Essentially 100%
-   Which posterior gives the *highest confidence* (*highest
    probability*) that the slope parameter is positive? How can you
    tell?
    -   Posterior C, as the probability is essentially 100% (as we
        identified above). <!-- solution-end -->
:::

**General inference**

::: {.callout-note icon="false" title="Questions for the Class"}
-   How does the slope parameter relate to our hypothesis? As a
    reminder, our hypothesis is: \> *As the population of Black
    Americans increases (decreases), the level of energy expenditure
    increases (decreases).* <!-- task-begin -->
    -   (Write your response here): <!-- task-end -->
        <!-- solution-begin -->
    -   The slope parameter is directly related to our hypothesis. A
        positive slope is in agreement with our hypothesis.
        <!-- solution-end -->
:::

Let's return to the posterior from our model for the Massachusetts data
and use the same reasoning as above to make sense of the results.

```{r}
#| warning: false
#| echo: false
#| fig-align: center
#| fig-height: 3
df_model_MA %>% 
  ggplot(aes(Slope)) +
  geom_vline(xintercept = 0, linetype = "dotted") +
  geom_density() +
  scale_x_continuous(limits = c(0, 100)) +
  theme_minimal() +
  labs(
    x = "Slope Parameter",
    y = "Posterior Density",
    title = "Posterior Density: Massachusetts Results"
  )
```

::: {.callout-note icon="false" title="Questions for the Class"}
-   For Massachusetts, does the fitted model support or contradict our
    hypothesis? As a reminder, our hypothesis is:

    > *As the population of Black Americans increases (decreases), the
    > level of energy expenditure increases (decreases).*

<!-- task-begin -->

-   (Write your response here):
-   How confident are you in the model results?
    -   (Write your response here): <!-- task-end -->
        <!-- solution-begin -->
    -   The fitted model supports our hypothesis.
-   How confident are you in the model results?
    -   The model assigns a nearly 100% probability to a positive slope,
        which suggests a high confidence in a positive slope.
        <!-- solution-end -->
:::

## Study the posterior predictions

Bayesian analysis does not produce a "best" line; rather, the posterior
distribution implies a *family* of lines (each with a different chance).
We call this the *posterior predictive distribution*. For instance, the
following visualizes the posterior predictive distribution of lines
against the Massachusetts data. This object appears as a "cone" with
darker regions corresponding to lines with higher probability (density).

```{r}
#| warning: false
#| echo: false
#| fig-align: center
#| fig-height: 3
df_data %>% 
  filter(str_detect(state_territory, "Massachusetts")) %>% 
  
  ggplot(aes(
    x = percent_black_or_african_american_alone,
    y = energy_burden_percentile
  )) +
  geom_line(
    data = . %>% 
      filter(!is.na(percent_black_or_african_american_alone)) %>% 
      select(percent_black_or_african_american_alone) %>% 
      tidybayes::add_fitted_draws(model_MA, n = 1000),
    aes(y = .value, group = .draw), 
    alpha = 0.01,
    linewidth = 2.0,
    color = "blue"
  ) +
  geom_point(size = 0.1) +
  scale_x_continuous(labels = scales::percent) +
  theme_minimal() +
  labs(
    x = "Percent Black Census Tract",
    y = "Energy Burden Percentile",
  )
```

We can use this kind of plot (predictions against observed data) as a
way to sanity check the model. You'll do this in the following
questions.

::: {.callout-note icon="false" title="Questions for the Class"}
-   Do all data points (black dots) land near the predicted lines
    (transparent blue lines), or do some dots land far from the lines?
    -   (Write your response here):
-   This model represents the *overall trend* in the data well. In your
    own words, describe how the model fits the overall trend in the
    data.
    -   (Write your response here): <!-- solution-begin -->
-   Do all data points (black dots) land near the predicted lines
    (transparent blue lines), or do some dots land far from the lines?
    -   No, there is variability in the data that remains unexplained by
        the model.
-   This model represents the *overall trend* in the data well. In your
    own words, describe how the model fits the overall trend in the
    data.
    -   While the data points exhibit a great deal of variability, their
        average tends to increase from left to right. More formally,
        their mean conditional on the predictor tends to increase.
        <!-- solution-end -->
:::

# The Prior Distribution

Above, we glossed over how we arrive at a posterior distribution. In
addition to the equation for the line we must also provide a *prior
distribution* for the model's parameters. In a Bayesian analysis the
prior represents all of our *prior knowledge* about the problem.

For instance, if we were confident that the slope of the Energy Burden
vs Percent Black line is positive, we could represent that with a prior
distribution that was tightly concentrated at a positive value (Case A
below). If we were highly uncertain about the slope, we might represent
this case with a prior distribution centered at zero with a very large
standard deviation (Case B below).

```{r}
#| warning: false
#| echo: false
#| fig-align: center
#| fig-height: 3
slope_mean_A <- +75
slope_mean_B <- 0
slope_sd_A <- 5
slope_sd_B <- 25

df_MA_priors <- 
  tibble(Slope = seq(-25, 100, length.out = 200)) %>% 
  mutate(
    d_A = dnorm(Slope, mean = slope_mean_A, sd = slope_sd_A),
    d_B = dnorm(Slope, mean = slope_mean_B, sd = slope_sd_B),
  ) %>% 
  pivot_longer(
    cols = contains("d_"),
    names_sep = "_",
    names_to = c(".value", "Case")
  )
  
df_MA_priors %>% 
  ggplot(aes(Slope, d, color = Case)) +
  geom_line() +
  theme_minimal() +
  theme(legend.position = "bottom") +
  labs(
    x = "Slope Parameter",
    y = "Prior Density"
  )
```

## Fitting a model: Data + Prior = Posterior

The mathematical details of fitting a Bayesian model are outside the
scope of this activity. However, the basic "formula" is:

\[ \text{Data} + \text{Model} = \text{Posterior} \]

Note that the Model contains both the formula for the model
$B = m P + b + \epsilon$ and the prior distribution for the parameters
$m, b, \sigma^2$. With a small dataset the posterior distribution will
largely depend on the prior. With a larger dataset, the posterior will
depend more on the data.

```{r}
#| include: false
#| echo: false
#| cache: true
model_MA_caseA <- stan_glm(
  data = df_data %>% 
    filter(
      str_detect(state_territory, "Massachusetts"),
      !is.na(percent_black_or_african_american_alone)
    ),
  # Likelihood model
  formula = energy_burden_percentile ~ percent_black_or_african_american_alone,
  family = gaussian,           # link function
  # Slope prior
  prior = normal(slope_mean_A, slope_sd_A),
  # Intercept prior
  prior_intercept = normal(mean_Intercept_GLOBAL, sd_Intercept_GLOBAL),
  # Numerical parameters
  chains = 4, 
  iter = 5000*2, # to account for 50% burn-in
  seed = 84735,  # the BAYES seed!
  refresh = FALSE
)

model_MA_caseB <- stan_glm(
  data = df_data %>% 
    filter(
      str_detect(state_territory, "Massachusetts"),
      !is.na(percent_black_or_african_american_alone)
    ),
  # Likelihood model
  formula = energy_burden_percentile ~ percent_black_or_african_american_alone,
  family = gaussian,           # link function
  # Slope prior
  prior = normal(slope_mean_B, slope_sd_B),
  # Intercept prior
  prior_intercept = normal(mean_Intercept_GLOBAL, sd_Intercept_GLOBAL),
  # Numerical parameters
  chains = 4, 
  iter = 5000*2, # to account for 50% burn-in
  seed = 84735,  # the BAYES seed!
  refresh = FALSE
)
```

For instance, the following figure shows what happens when we use two
different prior distributions for the slope when fitting the
Massachusetts data:

```{r}
#| warning: false
#| echo: false
#| fig-align: center
#| fig-height: 3
df_model_MA_caseA <- 
  model_MA_caseA %>% 
  as_tibble() %>% 
  select(Slope = percent_black_or_african_american_alone) %>% 
  mutate(Case = "A", Distribution = "Posterior")

df_model_MA_caseB <- 
  model_MA_caseB %>% 
  as_tibble() %>% 
  select(Slope = percent_black_or_african_american_alone) %>% 
  mutate(Case = "B", Distribution = "Posterior")

bind_rows(df_model_MA_caseA, df_model_MA_caseB) %>% 
  ggplot(aes(Slope, color = Case, linetype = Distribution)) +
  geom_density() +
  geom_line(
    data = df_MA_priors %>% mutate(Distribution = "Prior"),
    mapping = aes(y = d),
  ) +
  scale_linetype_manual(
    values = c(
      "Prior" = "dashed",
      "Posterior" = "solid"
    ) 
  ) +
  theme_minimal() +
  theme(legend.position = "bottom") +
  labs(
    x = "Parameter Value",
    y = "Posterior Density",
  )
```

Note that the highly uncertain Case B is shifted quite a bit more (from
prior to posterior) than the Case A results. If we were to obtain a
larger and larger dataset, using either prior (Case A or B) would
converge to the same posterior distribution.

```{r prior-MA}
#| include: false
#| echo: false
#| cache: true
mean_Intercept_MA <- 
  df_model_MA %>% 
  pull(Intercept) %>% 
  mean()
mean_Slope_MA <- 
  df_model_MA %>% 
  pull(Slope) %>% 
  mean()

sd_Intercept_MA <- 
  df_model_MA %>% 
  pull(Intercept) %>% 
  sd()
sd_Slope_MA <- 
  df_model_MA %>% 
  pull(Slope) %>% 
  sd()
```

```{r fit-MN}
#| include: false
#| echo: false
#| cache: true
model_MN <- stan_glm(
  data = df_data %>% 
    filter(
      str_detect(state_territory, "Minnesota"),
      !is.na(percent_black_or_african_american_alone)
    ),
  # Likelihood model
  formula = energy_burden_percentile ~ percent_black_or_african_american_alone,
  family = gaussian,           # link function
  # Prior model, use the Stan defaults
  # Numerical parameters
  chains = 4, 
  iter = 5000*2, # to account for 50% burn-in
  seed = 84735,  # the BAYES seed!
  refresh = FALSE
)

df_model_MN <- 
  model_MN %>% 
  as_tibble() %>% 
  select(Intercept = `(Intercept)`, Slope = percent_black_or_african_american_alone)

mean_Intercept_MN <- 
  df_model_MN %>% 
  pull(Intercept) %>% 
  mean()
mean_Slope_MN <- 
  df_model_MN %>% 
  pull(Slope) %>% 
  mean()

sd_Intercept_MN <- 
  df_model_MN %>% 
  pull(Intercept) %>% 
  sd()
sd_Slope_MN <- 
  df_model_MN %>% 
  pull(Slope) %>% 
  sd()
```

```{r fit-NH}
#| include: false
#| echo: false
#| cache: true
model_NH <- stan_glm(
  data = df_data %>% 
    filter(
      str_detect(state_territory, "New Hampshire"),
      !is.na(percent_black_or_african_american_alone)
    ),
  # Likelihood model
  formula = energy_burden_percentile ~ percent_black_or_african_american_alone,
  family = gaussian,           # link function
  # Prior model, use the Stan defaults
  # Numerical parameters
  chains = 4, 
  iter = 5000*2, # to account for 50% burn-in
  seed = 84735,  # the BAYES seed!
  refresh = FALSE
)

df_model_NH <- 
  model_NH %>% 
  as_tibble() %>% 
  select(Intercept = `(Intercept)`, Slope = percent_black_or_african_american_alone)

mean_Intercept_NH <- 
  df_model_NH %>% 
  pull(Intercept) %>% 
  mean()
mean_Slope_NH <- 
  df_model_NH %>% 
  pull(Slope) %>% 
  mean()

sd_Intercept_NH <- 
  df_model_NH %>% 
  pull(Intercept) %>% 
  sd()
sd_Slope_NH <- 
  df_model_NH %>% 
  pull(Slope) %>% 
  sd()
```

## Three options

Bayesian approaches to statistics are particularly useful when we have
limited data, as they allow us to incorporate prior knowledge. For the
rest of the activity we'll consider a scenario where our access to the
CEJS data is limited: Suppose we are conducting our analysis while the
data are actively being gathered. In this case, we may have access to
the data for some states before others. In this context, we can conduct
a *sequential* Bayesian analysis by using the posterior from one
analysis as the prior for a new analysis.

```{r}
#| warning: false
#| echo: false
#| fig-align: center
#| fig-height: 3
tibble(x = seq(-100, 100, length.out = 500)) %>% 
  mutate(
    d_Slope_MA = dnorm(x, mean = mean_Slope_MA, sd = sd_Slope_MA),
    d_Slope_MN = dnorm(x, mean = mean_Slope_MN, sd = sd_Slope_MN),
    d_Slope_NH = dnorm(x, mean = mean_Slope_NH, sd = sd_Slope_NH),
  ) %>% 
  pivot_longer(
    cols = contains("d_"),
    names_sep = "_",
    names_to = c(".value", "Parameter", "State")
  ) %>% 
  
  ggplot(aes(x, d)) +
  geom_line() +
  geom_vline(xintercept = 0, linetype = "dotted") +
  facet_grid(. ~ State, scales = "free", labeller = label_both) +
  theme_minimal() +
  labs(
    x = "Slope Parameter",
    y = "Posterior Density"
  )
```

::: {.callout-note icon="false" title="Pick a State"}
Study the posteriors above carefully; you will use this as a *prior
distribution* for the slope for the rest of the activity. This means you
will combine *new data* with a *prior distribution* to form a new
*posterior distribution* for the model parameters. The *prior
distribution* should reflect your beliefs about what you think the slope
parameter should be.

Pick *one state for your group*, then come ask the instructor for your
chosen state's packet.
:::

# Colorado

<!-- solution-begin -->

## (PREP) Print CO results

Print the following three graphs and place them in envelopes labelled
for the State-based prior.

```{r}
#| include: false
#| echo: false
#| cache: true
model_CO_MA <- stan_glm(
  data = df_data %>% 
    filter(
      str_detect(state_territory, "Colorado"),
      !is.na(percent_black_or_african_american_alone)
    ),
  # Likelihood model
  formula = energy_burden_percentile ~ percent_black_or_african_american_alone,
  family = gaussian,           # link function
  # Slope prior
  prior = normal(mean_Slope_MA, sd_Slope_MA),
  # Intercept prior
  # prior_intercept = normal(mean_Intercept_MA, sd_Intercept_MA),
  prior_intercept = normal(mean_Intercept_GLOBAL, sd_Intercept_GLOBAL),
  # Numerical parameters
  chains = 4, 
  iter = 5000*2, # to account for 50% burn-in
  seed = 84735,  # the BAYES seed!
  refresh = FALSE
)

model_CO_MN <- stan_glm(
  data = df_data %>% 
    filter(
      str_detect(state_territory, "Colorado"),
      !is.na(percent_black_or_african_american_alone)
    ),
  # Likelihood model
  formula = energy_burden_percentile ~ percent_black_or_african_american_alone,
  family = gaussian,           # link function
  # Slope prior
  prior = normal(mean_Slope_MN, sd_Slope_MN),
  # Intercept prior
  # prior_intercept = normal(mean_Intercept_MN, sd_Intercept_MN),
  prior_intercept = normal(mean_Intercept_GLOBAL, sd_Intercept_GLOBAL),
  # Numerical parameters
  chains = 4, 
  iter = 5000*2, # to account for 50% burn-in
  seed = 84735,  # the BAYES seed!
  refresh = FALSE
)

model_CO_NH <- stan_glm(
  data = df_data %>% 
    filter(
      str_detect(state_territory, "Colorado"),
      !is.na(percent_black_or_african_american_alone)
    ),
  # Likelihood model
  formula = energy_burden_percentile ~ percent_black_or_african_american_alone,
  family = gaussian,           # link function
  # Slope prior
  prior = normal(mean_Slope_NH, sd_Slope_NH),
  # Intercept prior
  # prior_intercept = normal(mean_Intercept_NH, sd_Intercept_NH),
  prior_intercept = normal(mean_Intercept_GLOBAL, sd_Intercept_GLOBAL),
  # Numerical parameters
  chains = 4, 
  iter = 5000*2, # to account for 50% burn-in
  seed = 84735,  # the BAYES seed!
  refresh = FALSE
)
```

### MA-based Prior

```{r}
#| warning: false
#| echo: false
#| fig-align: center
#| fig-height: 3
p_CO_MA_predict <- 
  df_data %>% 
  filter(str_detect(state_territory, "Colorado")) %>% 
  
  ggplot(aes(
    x = percent_black_or_african_american_alone,
    y = energy_burden_percentile
  )) +
  geom_line(
    data = . %>% 
      filter(!is.na(percent_black_or_african_american_alone)) %>% 
      select(percent_black_or_african_american_alone) %>% 
      tidybayes::add_fitted_draws(model_CO_MA, n = 1000),
    aes(y = .value, group = .draw), 
    alpha = 0.01,
    linewidth = 2.0,
    color = "blue",
  ) +
  
  geom_point(size = 0.1) +
  scale_x_continuous(labels = scales::percent) +
  theme_minimal() +
  guides(color = "none") +
  labs(
    x = "Percent Black Census Tract",
    y = "Energy Burden Percentile",
    title = "Colorado, MA-based Prior"
  )

p_CO_MA_posterior <- 
  model_CO_MA %>% 
  as_tibble() %>% 
  select(Slope = percent_black_or_african_american_alone) %>% 
  ggplot(aes(Slope)) +
  geom_vline(xintercept = 0, linetype = "dotted") +
  geom_density() +
  theme_minimal() +
  labs(
    x = "Slope Parameter",
    y = "Posterior Density"
  )

p_CO_MA_predict + p_CO_MA_posterior 
ggsave("./prep/priorMA_CO.png", bg = "white")
```

### MN-based Prior

```{r}
#| warning: false
#| echo: false
#| fig-align: center
#| fig-height: 3
p_CO_MN_predict <- 
  df_data %>% 
  filter(str_detect(state_territory, "Colorado")) %>% 
  
  ggplot(aes(
    x = percent_black_or_african_american_alone,
    y = energy_burden_percentile
  )) +
  geom_line(
    data = . %>% 
      filter(!is.na(percent_black_or_african_american_alone)) %>% 
      select(percent_black_or_african_american_alone) %>% 
      tidybayes::add_fitted_draws(model_CO_MN, n = 1000),
    aes(y = .value, group = .draw), 
    alpha = 0.01,
    linewidth = 2.0,
    color = "blue",
  ) +
  
  geom_point(size = 0.1) +
  scale_x_continuous(labels = scales::percent) +
  theme_minimal() +
  guides(color = "none") +
  labs(
    x = "Percent Black Census Tract",
    y = "Energy Burden Percentile",
    title = "Colorado, MN-based Prior"
  )

p_CO_MN_posterior <- 
  model_CO_MN %>% 
  as_tibble() %>% 
  select(Slope = percent_black_or_african_american_alone) %>% 
  ggplot(aes(Slope)) +
  geom_vline(xintercept = 0, linetype = "dotted") +
  geom_density() +
  theme_minimal() +
  labs(
    x = "Slope Parameter",
    y = "Posterior Density"
  )

p_CO_MN_predict + p_CO_MN_posterior 
ggsave("./prep/priorMN_CO.png", bg = "white")
```

### NH-based Prior

```{r}
#| warning: false
#| echo: false
#| fig-align: center
#| fig-height: 3
p_CO_NH_predict <- 
  df_data %>% 
  filter(str_detect(state_territory, "Colorado")) %>% 
  
  ggplot(aes(
    x = percent_black_or_african_american_alone,
    y = energy_burden_percentile
  )) +
  geom_line(
    data = . %>% 
      filter(!is.na(percent_black_or_african_american_alone)) %>% 
      select(percent_black_or_african_american_alone) %>% 
      tidybayes::add_fitted_draws(model_CO_NH, n = 1000),
    aes(y = .value, group = .draw), 
    alpha = 0.01,
    linewidth = 2.0,
    color = "blue",
  ) +
  
  geom_point(size = 0.1) +
  scale_x_continuous(labels = scales::percent) +
  theme_minimal() +
  guides(color = "none") +
  labs(
    x = "Percent Black Census Tract",
    y = "Energy Burden Percentile",
    title = "Colorado, NH-based Prior"
  )

p_CO_NH_posterior <- 
  model_CO_NH %>% 
  as_tibble() %>% 
  select(Slope = percent_black_or_african_american_alone) %>% 
  ggplot(aes(Slope)) +
  geom_vline(xintercept = 0, linetype = "dotted") +
  geom_density() +
  theme_minimal() +
  labs(
    x = "Slope Parameter",
    y = "Posterior Density"
  )

p_CO_NH_predict + p_CO_NH_posterior 
ggsave("./prep/priorNH_CO.png", bg = "white")
```

<!-- solution-end -->

## Study the results

::: {.callout-note icon="false" title="Studying Model Results"}
<!-- task-begin -->

-   What does the model suggest about the trend of energy burden with
    percent Black in Colorado?
    -   (Write your response here):
-   How well do the model predictions match the data?
    -   (Write your response here):
-   How confident are you in your conclusion?
    -   (Write your response here): <!-- task-end -->
        <!-- solution-begin -->
-   For the MA-based prior, the posterior predictions do not match the
    data well. The posterior is extremely confident in a positive slope,
    which agrees with our hypothesis.
-   For the MN-based prior, the posterior predictions do match the data
    well. The posterior is extremely confident in a negative slope,
    which contradicts our hypothesis.
-   For the NH-based prior, the posterior predictions do match the data
    well. The posterior is quite confident in a negative slope, which
    contradicts our hypothesis. <!-- solution-end -->
:::

# Florida

In some cases, we may find that gathering more data is simply not
possible. Let's suppose that, for some reason, Florida is unwilling to
provide all of their energy burden data. Therefore, we must figure out
what to do with only $n=25$ observations:

```{r}
#| warning: false
#| echo: false
#| fig-align: center
#| fig-height: 3
set.seed(101)

df_fl <- 
  df_data %>% 
  filter(state_territory == "Florida") %>% 
  slice_sample(n = 25)

df_fl %>% 
  ggplot(aes(
    percent_black_or_african_american_alone,
    energy_burden_percentile
  )) +
  geom_point(size = 1.0) +
  scale_x_continuous(labels = scales::percent) +
  theme_minimal() +
  labs(
    x = "Percent Black Census Tract",
    y = "Energy Burden Percentile",
  )
```

Given the limited data, our results will depend much more strongly on
our prior distribution.

<!-- solution-begin -->

## (PREP) Print FL results

Print the following three graphs and place them in envelopes labelled
for the State-based prior.

```{r}
#| include: false
#| echo: false
#| cache: true
model_FL_MA <- stan_glm(
  data = df_fl,
  # Likelihood model
  formula = energy_burden_percentile ~ percent_black_or_african_american_alone,
  family = gaussian,           # link function
  # Slope prior
  prior = normal(mean_Slope_MA, sd_Slope_MA),
  # Intercept prior
  # prior_intercept = normal(mean_Intercept_MA, sd_Intercept_MA),
  prior_intercept = normal(mean_Intercept_GLOBAL, sd_Intercept_GLOBAL),
  # Numerical parameters
  chains = 4, 
  iter = 5000*2, # to account for 50% burn-in
  seed = 84735,  # the BAYES seed!
  refresh = FALSE
)

model_FL_MN <- stan_glm(
  data = df_fl,
  # Likelihood model
  formula = energy_burden_percentile ~ percent_black_or_african_american_alone,
  family = gaussian,           # link function
  # Slope prior
  prior = normal(mean_Slope_MN, sd_Slope_MN),
  # Intercept prior
  # prior_intercept = normal(mean_Intercept_MN, sd_Intercept_MN),
  prior_intercept = normal(mean_Intercept_GLOBAL, sd_Intercept_GLOBAL),
  # Numerical parameters
  chains = 4, 
  iter = 5000*2, # to account for 50% burn-in
  seed = 84735,  # the BAYES seed!
  refresh = FALSE
)

model_FL_NH <- stan_glm(
  data = df_fl,
  # Likelihood model
  formula = energy_burden_percentile ~ percent_black_or_african_american_alone,
  family = gaussian,           # link function
  # Slope prior
  prior = normal(mean_Slope_NH, sd_Slope_NH),
  # Intercept prior
  # prior_intercept = normal(mean_Intercept_NH, sd_Intercept_NH),
  prior_intercept = normal(mean_Intercept_GLOBAL, sd_Intercept_GLOBAL),
  # Numerical parameters
  chains = 4, 
  iter = 5000*2, # to account for 50% burn-in
  seed = 84735,  # the BAYES seed!
  refresh = FALSE
)
```

### MA-based Prior

```{r}
#| warning: false
#| echo: false
#| fig-align: center
#| fig-height: 3
p_FL_MA_predict <- 
  df_fl %>% 
  
  ggplot(aes(
    x = percent_black_or_african_american_alone,
    y = energy_burden_percentile
  )) +
  geom_line(
    data = . %>% 
      filter(!is.na(percent_black_or_african_american_alone)) %>% 
      select(percent_black_or_african_american_alone) %>% 
      tidybayes::add_fitted_draws(model_FL_MA, n = 1000),
    aes(y = .value, group = .draw), 
    alpha = 0.01,
    linewidth = 2.0,
    color = "blue",
  ) +
  
  geom_point(size = 0.1) +
  scale_x_continuous(labels = scales::percent) +
  theme_minimal() +
  guides(color = "none") +
  labs(
    x = "Percent Black Census Tract",
    y = "Energy Burden Percentile",
    title = "Florida, MA-based Prior"
  )

p_FL_MA_posterior <- 
  model_FL_MA %>% 
  as_tibble() %>% 
  select(Slope = percent_black_or_african_american_alone) %>% 
  ggplot(aes(Slope)) +
  geom_vline(xintercept = 0, linetype = "dotted") +
  geom_density() +
  theme_minimal() +
  labs(
    x = "Slope Parameter",
    y = "Posterior Density"
  )

p_FL_MA_predict + p_FL_MA_posterior 
ggsave("./prep/priorMA_FL.png", bg = "white")
```

### MN-based Prior

```{r}
#| warning: false
#| echo: false
#| fig-align: center
#| fig-height: 3
p_FL_MN_predict <- 
  df_fl %>% 
  
  ggplot(aes(
    x = percent_black_or_african_american_alone,
    y = energy_burden_percentile
  )) +
  geom_line(
    data = . %>% 
      filter(!is.na(percent_black_or_african_american_alone)) %>% 
      select(percent_black_or_african_american_alone) %>% 
      tidybayes::add_fitted_draws(model_FL_MN, n = 1000),
    aes(y = .value, group = .draw), 
    alpha = 0.01,
    linewidth = 2.0,
    color = "blue",
  ) +
  
  geom_point(size = 0.1) +
  scale_x_continuous(labels = scales::percent) +
  theme_minimal() +
  guides(color = "none") +
  labs(
    x = "Percent Black Census Tract",
    y = "Energy Burden Percentile",
    title = "Florida, MN-based Prior"
  )

p_FL_MN_posterior <- 
  model_FL_MN %>% 
  as_tibble() %>% 
  select(Slope = percent_black_or_african_american_alone) %>% 
  ggplot(aes(Slope)) +
  geom_vline(xintercept = 0, linetype = "dotted") +
  geom_density() +
  theme_minimal() +
  labs(
    x = "Slope Parameter",
    y = "Posterior Density"
  )

p_FL_MN_predict + p_FL_MN_posterior 
ggsave("./prep/priorMN_FL.png", bg = "white")
```

### NH-based Prior

```{r}
#| warning: false
#| echo: false
#| fig-align: center
#| fig-height: 3
p_FL_NH_predict <- 
  df_fl %>% 
  
  ggplot(aes(
    x = percent_black_or_african_american_alone,
    y = energy_burden_percentile
  )) +
  geom_line(
    data = . %>% 
      filter(!is.na(percent_black_or_african_american_alone)) %>% 
      select(percent_black_or_african_american_alone) %>% 
      tidybayes::add_fitted_draws(model_FL_NH, n = 1000),
    aes(y = .value, group = .draw), 
    alpha = 0.01,
    linewidth = 2.0,
    color = "blue",
  ) +
  
  geom_point(size = 0.1) +
  scale_x_continuous(labels = scales::percent) +
  theme_minimal() +
  guides(color = "none") +
  labs(
    x = "Percent Black Census Tract",
    y = "Energy Burden Percentile",
    title = "Florida, NH-based Prior"
  )

p_FL_NH_posterior <- 
  model_FL_NH %>% 
  as_tibble() %>% 
  select(Slope = percent_black_or_african_american_alone) %>% 
  ggplot(aes(Slope)) +
  geom_vline(xintercept = 0, linetype = "dotted") +
  geom_density() +
  theme_minimal() +
  labs(
    x = "Slope Parameter",
    y = "Posterior Density"
  )

p_FL_NH_predict + p_FL_NH_posterior 
ggsave("./prep/priorNH_FL.png", bg = "white")
```

<!-- solution-begin -->

## Study the results

::: {.callout-note icon="false" title="Studying Model Results"}
<!-- task-begin -->

-   What does the model suggest about the trend of energy burden with
    percent Black in Florida?
    -   (Write your response here):
-   How well do the model predictions match the data?
    -   (Write your response here):
-   How confident are you in your conclusion?
    -   (Write your response here): <!-- task-end -->
        <!-- solution-begin -->
-   With the MA-based prior, we would assign a high posterior
    probability to a positive slope
-   With the MN-based prior, we would assign a high posterior
    probability to a *negative* slope
-   With the NH-based prior, we would have an inconclusive analysis
    <!-- solution-end -->
:::

# Full USA

After waiting some time, we finally get access to the full U.S. CEJS
dataset. With such a large dataset, we expect to see that the results
will not depend so much on our choice of prior distribution.

<!-- solution-begin -->

## (PREP) Print USA Results

Print the following three graphs and place them in envelopes labelled
for the State-based prior.

```{r}
#| include: false
#| echo: false
#| cache: true
# Random sample of valid observations
df_USA <- 
  df_data %>% 
  filter(!is.na(percent_black_or_african_american_alone)) %>% 
  slice_sample(n = 10000)

model_USA_MA <- stan_glm(
  data = df_USA,
  # Likelihood model
  formula = energy_burden_percentile ~ percent_black_or_african_american_alone,
  family = gaussian,           # link function
  # Slope prior
  prior = normal(mean_Slope_MA, sd_Slope_MA),
  # Intercept prior
  # prior_intercept = normal(mean_Intercept_MA, sd_Intercept_MA),
  prior_intercept = normal(mean_Intercept_GLOBAL, sd_Intercept_GLOBAL),
  # Numerical parameters
  chains = 4, 
  iter = 5000*2, # to account for 50% burn-in
  seed = 84735,  # the BAYES seed!
  refresh = FALSE
)

model_USA_MN <- stan_glm(
  data = df_USA,
  # Likelihood model
  formula = energy_burden_percentile ~ percent_black_or_african_american_alone,
  family = gaussian,           # link function
  # Slope prior
  prior = normal(mean_Slope_MN, sd_Slope_MN),
  # Intercept prior
  # prior_intercept = normal(mean_Intercept_MN, sd_Intercept_MN),
  prior_intercept = normal(mean_Intercept_GLOBAL, sd_Intercept_GLOBAL),
  # Numerical parameters
  chains = 4, 
  iter = 5000*2, # to account for 50% burn-in
  seed = 84735,  # the BAYES seed!
  refresh = FALSE
)

model_USA_NH <- stan_glm(
  data = df_USA,
  # Likelihood model
  formula = energy_burden_percentile ~ percent_black_or_african_american_alone,
  family = gaussian,           # link function
  # Slope prior
  prior = normal(mean_Slope_NH, sd_Slope_NH),
  # Intercept prior
  # prior_intercept = normal(mean_Intercept_NH, sd_Intercept_NH),
  prior_intercept = normal(mean_Intercept_GLOBAL, sd_Intercept_GLOBAL),
  # Numerical parameters
  chains = 4, 
  iter = 5000*2, # to account for 50% burn-in
  seed = 84735,  # the BAYES seed!
  refresh = FALSE
)
```

### MA-based Prior

```{r}
#| warning: false
#| echo: false
#| fig-align: center
#| fig-height: 3
p_USA_MA_predict <- 
  df_data %>% 
  
  ggplot(aes(
    x = percent_black_or_african_american_alone,
    y = energy_burden_percentile
  )) +
  geom_line(
    data = tibble(percent_black_or_african_american_alone = seq(0, 1, length.out = 100)) %>% 
      tidybayes::add_fitted_draws(model_USA_MA, n = 1000),
    aes(y = .value, group = .draw), 
    alpha = 0.01,
    linewidth = 2.0,
    color = "blue",
  ) +
  
  geom_point(size = 0.1) +
  scale_x_continuous(labels = scales::percent) +
  theme_minimal() +
  guides(color = "none") +
  labs(
    x = "Percent Black Census Tract",
    y = "Energy Burden Percentile",
    title = "Full USA, MA-based Prior"
  )

p_USA_MA_posterior <-
  model_USA_MA %>%
  as_tibble() %>%
  select(Slope = percent_black_or_african_american_alone) %>%
  ggplot(aes(Slope)) +
  geom_vline(xintercept = 0, linetype = "dotted") +
  geom_density() +
  theme_minimal() +
  labs(
    x = "Slope Parameter",
    y = "Posterior Density"
  )

p_USA_MA_predict + p_USA_MA_posterior
ggsave("./prep/priorMA_USA.png", bg = "white")
```

### MN-based Prior

```{r}
#| warning: false
#| echo: false
#| fig-align: center
#| fig-height: 3
p_USA_MN_predict <- 
  df_data %>% 
  
  ggplot(aes(
    x = percent_black_or_african_american_alone,
    y = energy_burden_percentile
  )) +
  geom_line(
    data = tibble(percent_black_or_african_american_alone = seq(0, 1, length.out = 100)) %>% 
      tidybayes::add_fitted_draws(model_USA_MN, n = 1000),
    aes(y = .value, group = .draw), 
    alpha = 0.01,
    linewidth = 2.0,
    color = "blue",
  ) +
  
  geom_point(size = 0.1) +
  scale_x_continuous(labels = scales::percent) +
  theme_minimal() +
  guides(color = "none") +
  labs(
    x = "Percent Black Census Tract",
    y = "Energy Burden Percentile",
    title = "Full USA, MN-based Prior"
  )

p_USA_MN_posterior <- 
  model_USA_MN %>% 
  as_tibble() %>% 
  select(Slope = percent_black_or_african_american_alone) %>% 
  ggplot(aes(Slope)) +
  geom_vline(xintercept = 0, linetype = "dotted") +
  geom_density() +
  theme_minimal() +
  labs(
    x = "Slope Parameter",
    y = "Posterior Density"
  )

p_USA_MN_predict + p_USA_MN_posterior 
ggsave("./prep/priorMN_USA.png", bg = "white")
```

### NH-based Prior

```{r}
#| warning: false
#| echo: false
#| fig-align: center
#| fig-height: 3
p_USA_NH_predict <- 
  df_data %>% 
  
  ggplot(aes(
    x = percent_black_or_african_american_alone,
    y = energy_burden_percentile
  )) +
  geom_line(
    data = tibble(percent_black_or_african_american_alone = seq(0, 1, length.out = 100)) %>% 
      tidybayes::add_fitted_draws(model_USA_NH, n = 1000),
    aes(y = .value, group = .draw), 
    alpha = 0.01,
    linewidth = 2.0,
    color = "blue",
  ) +
  
  geom_point(size = 0.1) +
  scale_x_continuous(labels = scales::percent) +
  theme_minimal() +
  guides(color = "none") +
  labs(
    x = "Percent Black Census Tract",
    y = "Energy Burden Percentile",
    title = "Full USA, NH-based Prior"
  )

p_USA_NH_posterior <- 
  model_USA_NH %>% 
  as_tibble() %>% 
  select(Slope = percent_black_or_african_american_alone) %>% 
  ggplot(aes(Slope)) +
  geom_vline(xintercept = 0, linetype = "dotted") +
  geom_density() +
  theme_minimal() +
  labs(
    x = "Slope Parameter",
    y = "Posterior Density"
  )

p_USA_NH_predict + p_USA_NH_posterior 
ggsave("./prep/priorNH_USA.png", bg = "white")
```

<!-- solution-end -->

## Study the results

::: {.callout-note icon="false" title="Studying Model Results"}
<!-- task-end -->

-   What does the model suggest about the trend of energy burden with
    percent Black across the whole U.S.?
    -   (Write your response here):
-   How well do the model predictions match the data?
    -   (Write your response here):
-   How confident are you in your conclusion?
    -   (Write your response here): <!-- task-end -->
        <!-- solution-begin -->
-   With all three priors, we would assign a very high posterior
    probability to the slope being positive. <!-- solution-end -->
:::
